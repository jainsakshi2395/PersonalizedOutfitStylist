# -*- coding: utf-8 -*-
"""PredictBodyType.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1bp3fYdwThu1etKc_Ovr-OwcjjuQjGU4w

# Predict body type based on Measurements

**Model 4: Recommending outfits based on Body type calculated from User's body measurements.**

**Overall Model Mapping:**

*BWH measurements --> Body-Type --> Dress-types --> Outfits*

*   **Part 1:** Predict Body-type for given Bust, waist and hip measurements.
*   **Part 2:** Recommend Outfits suitable for derived Body type.
    *   Research on dress-types recommended for each Body type.Ex: A-line dresses and Full- sleeve dresses are recommended for Pear body-type.
    *   Model to provide list of recommendations for particular dress-type.
    *   Keeping the model up to date.

# Part1: BWH measurements --> Body-Type

The body type can be determined by the ratio of measurements between the bust, waist, and hip. There are several methods to calculate body type, but one common formula is the waist-to-hip ratio (WHR) and the bust-to-waist ratio (BWR).

**WHR(Waist-to-Hip Ratio)**

*   Pear-shaped body: WHR less than or equal to 0.80
*   Hourglass-shaped body: WHR between 0.81 and 0.85
*   Apple-shaped body: WHR greater than 0.85

**BWR(bust-to-waist ratio)**

*   Apple-shaped body: BWR 0.80 or lower
*   Hourglass-shaped body: BWR between 0.81 to 0.85 
*   Pear-shaped body: BWR Above 0.85 


There is no single formula that combines both bust-to-waist ratio (BWR) and waist-to-hip ratio (WHR) to predict body types like pear, apple, and hourglass. However, we can use a combination of the two ratios to get a general sense of body type.

For example, if someone has a WHR of 0.75 (indicating a pear-shaped body) and a BWR of 1.3 (indicating a more busty upper body), they may have a combination of both pear and hourglass body shapes.
"""

import numpy as np

import pandas as pd

path1 = 'https://drive.google.com/uc?id=1uTdERhfpCC0dtc-YyXadY9ZoHShJvsDU'
num = pd.read_csv(path1)
df = num.loc[:, ['ChestWidth ', 'Waist ', 'Hips ']]
df.columns = ['Bust', 'Waist', 'Hip']
df.dropna(inplace=True)
# df.head()

df['WaistToHipRatio'] = df['Waist'] / df['Hip']
# df.head()

df['BustToWaistRatio'] = df['Bust'] / df['Waist']


def determine_bodytype(df):
    # Add a new column called 'Bodytype'
    df['Bodytype'] = ''

    # Loop through each row in the dataframe
    for i in range(len(df)):
        # Determine body type based on WHR and BWR
        whr = df.at[i, 'WaistToHipRatio']
        bwr = df.at[i, 'BustToWaistRatio']
        if whr <= 0.80 and bwr > 0.85:
            df.at[i, 'Bodytype'] = 'Pear-Hourglass'
        elif whr <= 0.80 and bwr > 0.85:
            df.at[i, 'Bodytype'] = 'Hourglass'
        elif whr > 0.85 and bwr <= 0.80:
            df.at[i, 'Bodytype'] = 'Apple'
        elif whr <= 0.80:
            df.at[i, 'Bodytype'] = 'Pear'
        else:
            df.at[i, 'Bodytype'] = 'Rectangle'

    return df

df = determine_bodytype(df)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
# from sklearn.metrics import accuracy_score

# split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[['Bust', 'Waist', 'Hip']], df['Bodytype'], test_size=0.2, random_state=42)

# create a decision tree classifier and fit it to the training data
clf_bodytype = DecisionTreeClassifier()
clf_bodytype.fit(X_train, y_train)

# make predictions on the test data
y_pred = clf_bodytype.predict(X_test)

# evaluate the accuracy of the classifier
# accuracy = accuracy_score(y_test, y_pred)


"""# Part2: Body-Type --> Dress-types

Some commonly recommended dress types for different body types are:

*   **Pear-shaped body**: A-line dresses, wrap dresses, fit and flare dresses,high-waisted skirts, and bootcut jeans.
*   **Apple-shaped body**: Empire waist dresses, flowy tunics, V-neck tops, and high-waisted pants.
*   **Hourglass-shaped body**: Bodycon dresses, pencil skirts, tailored blazers, and high-waisted jeans.
*   **Rectangular-shaped body**: Shift dresses, sheath dresses, peplum tops, and flared pants.

It's worth noting that everyone's body is unique, and what looks good on one person may not look good on another, even if they have the same body type. Additionally, fashion rules are meant to be broken, and it's important to wear what makes you feel comfortable and confident.

"""
"""List of DressTypes:
'V-neck tops', 'tailored blazers', 'sheath dresses', 'high-waisted pants', 'bootcut jeans', 'peplum tops', 'Wrap dresses', 'fit and flare dresses', 'Bodycon dresses', 'Shift dresses', 'A-line dresses', 'Midi dresses', 'Pencil skirts', 'flowy tunics', 'Crop tops', 'high-waisted jeans', 'flared pants', 'wrap dresses', 'fit and flare dresses'

Keywords to find in dataset:

*   Pear -> wrap dress, fit and flare dress, A-line dress
*   Apple -> ***Empire waist***, V-neck, tunic
*   Hourglass -> Off-shoulder, ***Bodycon***, ***pencil skirt***, ***blazers***
*   Rectangle -> shift, ***sheath***, Flared Palazzos, peplum
*   Pear-Hourglass -> wrap dress, fit and flare dress, ***pencil skirt***, midi

TODO: In bold are not being filtered from the dataset as of now.

# Importing Myntra Dataset
"""
path2 = 'https://drive.google.com/uc?id=1ypzPWMt5FqtUYtS0kN_OpXjtYKXZxno9'
num = pd.read_csv(path2, on_bad_lines='skip')
df1 = num.loc[:, ['link', 'brand', 'title', 'product_type', 'images', 'product_details']]
df1.dropna(inplace=True)

num_rows = df1.shape[0]

body_types = {
    "Pear": "A-line dress, wrap dress, fit and flare dress",
    "Apple": "Empire waist, tunic, V-neck",
    "Hourglass": "Off-shoulder, Bodycon, pencil skirt, blazers",
    "Rectangle": "Shift, sheath, peplum , flared palazzos",
    "Pear-Hourglass": 'Wrap dress, Fit and flare dress, Pencil skirt, Midi'
}

dfmap = pd.DataFrame.from_dict(body_types, orient='index')
dfmap = dfmap.reset_index()
dfmap.columns = ['Bodytype', 'Dresstypes']

import re
def recommend_bodytype_results(predicted_bodytype):
  dress_types = dfmap.loc[dfmap['Bodytype'] == predicted_bodytype[0], 'Dresstypes'].iloc[0]
  keywords = dress_types.split(',')
  # Bodycon, Empire waist, pencil skirt, blazers , sheath
  # Add .strip().lower() to each keyword to ensure they're all in lowercase and have no extra spaces
  keywords = [kw.strip().lower() for kw in keywords]

  # Join keywords with '|' operator for regex pattern
  pattern = '|'.join(keywords)

  # Use str.contains() with regex pattern and case-insensitive flag
  filtered_df = df1[df1['product_type'].str.contains(pattern, flags=re.IGNORECASE) |
                  df1['product_details'].str.contains(pattern, flags=re.IGNORECASE) |
                  df1['title'].str.contains(pattern, flags=re.IGNORECASE)]

  return filtered_df

print('Model for Bodytype ran successfully!')